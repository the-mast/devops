# Provision website
# Usage: source env.sh && ansible-playbook playbooks/backup_wordpress.yml -i hosts.ini -l staging

---
- hosts: "*:!loadbalancer"
  become: yes

  vars:
    install_fail2ban: true

  vars_files:
    - "./vars/webserver.yml"

  pre_tasks:
    - debug: msg=Configuring the following host - {{ ansible_host}}

    - name: common dependencies
      apt: name={{ item }} state=latest
      with_items:
        - rsync
        - unzip
        - python-boto
        - python-bz2file
        - iptables

    - name: set correct timezone
      timezone:
        name: Africa/Lusaka

    - name: disable password login for ssh
      lineinfile:
        dest: /etc/ssh/sshd_config
        regexp: '^#PasswordAuthentication no'
        line: 'PasswordAuthentication no'
        backrefs: true
      notify: restart sshd

    - name: clear the box
      include: tasks/clear_box.yml
      when: clear_box

    - name: check if wordpress theme directory already exists
      stat:
        path: "{{ wordpress_installs[0].path }}/wp-content/themes/{{ wordpress_installs[0].themes[0].name }}"
      register: theme_dir
      
    - name: download & install theme if not there (local)
      include: tasks/wp_theme.yml
      when: not theme_dir.stat.exists
      
  post_tasks:
    - name: setup ajax load more plugin
      include: tasks/wp_alm.yml

    - name: restore_uploads
      include: tasks/restore_uploads.yml

    - name: adjust urls
      include: tasks/adjust_urls.yml
    - name: add SSL settings for reverse proxy
      blockinfile:
        dest: "{{ wordpress_installs[0].path }}/wp-config.php"
        insertbefore: "^// \\*\\* MySQL settings \\*\\* //"
        block: |
          define('FORCE_SSL_ADMIN', true);
          if (strpos($_SERVER['HTTP_X_FORWARDED_PROTO'], 'https') !== false)
          $_SERVER['HTTPS']='on';

    - name: import fixtures data
      include: tasks/import_fixtures.yml
      when: data_env in ('fixtures')

    - name: Ensure wp_admin password is set correctly after import from production or staging db
      shell: wp-cli user --allow-root --no-color --path="{{wordpress_installs[0].path}}" update "{{wordpress_installs[0].admin_name}}" --user_pass="{{wordpress_installs[0].admin_password}}"
      when: data_env in ('staging','production')
    - name: restart apache
      service: name=apache2 state=restarted
  roles:

    - role: database
      dbhost: "{{ wordpress_installs[0].dbhost}}"
      dbname: "{{ wordpress_installs[0].dbname }}"
      dbuser: "{{ wordpress_installs[0].dbuser }}"
      dbpass: "{{ wordpress_installs[0].dbpass }}"

    - role: import_db_data
      when: data_env in ('staging','production')

    - role: webserver

    - role: tersmitten.wordpress
      notify: restart apache

    - role: wp_filters
      notify: restart apache

  handlers:
    - name: restart sshd
      service:
        name: sshd
        state: restarted
